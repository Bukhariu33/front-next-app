import fs from 'fs';

import type { RolesToPermissions } from './get-roles-permissions';

const FILE_PATH = `./src/libs/packages/acl/roles-with-permission.d.ts`;

const createTSFile = async (content: string, path = FILE_PATH) => {
  if (typeof window !== 'undefined') return;

  try {
    const prettier = (await import('prettier')).format;
    const formatted = await prettier(content, {
      parser: 'typescript',
      semi: true,
      singleQuote: true,
      trailingComma: 'all',
      arrowParens: 'always',
      printWidth: 120,
    });

    fs.writeFileSync(path, formatted, 'utf8');
  } catch (error) {
    // can't find prettier
    fs.writeFileSync(path, content, 'utf8');
  }
};

export const CREATE_TYPES_COMMENT = `// This file is auto generated by create-types.ts
// Please don't edit it manually
`;

/**
 *
 * @param roles  Array of roles with permissions
 * @returns  Create types file
 *
 * @description
 *  This function will create a types file for the roles and permissions
 * It will be used in the frontend for type checking , and Generated File at src/libs/packages/acl/roles-with-permission.d.ts
 *
 */
export const createPermissionsTypes = (roles: RolesToPermissions) => {
  if (typeof window !== 'undefined') return;
  const ROLES_ENUM_ARR = Object.keys(roles);

  // const PERMISSIONS_ENUM_ARR = Object.values(roles).reduce(
  //   (acc, permissions) => {
  //     acc.push(...permissions);
  //     return acc;
  //   },
  //   [] as string[],
  // );

  // const PERMISSIONS_TYPE = `export type TPermission = ${PERMISSIONS_ENUM_ARR.map(
  //   permission => `'${permission}'`,
  // ).join(' | ')}`;

  const ROLES_TYPE = `export type TRole = ${ROLES_ENUM_ARR.map(
    role => `'${role}'`,
  ).join(' | ')}`;

  const content = [CREATE_TYPES_COMMENT, ROLES_TYPE].join('\n\n');

  createTSFile(content);
};

export const shouldCreateTypes = async () => {
  const file = await fs.promises.readFile(FILE_PATH, 'utf8');
  return (
    !file.includes(CREATE_TYPES_COMMENT) ||
    !file.includes(
      `export type TPermission =
  | `,
    )
  );
};
